var _user$project$Types$getCell = F3(
	function (r, c, field) {
		return A2(
			_elm_lang$core$Maybe$andThen,
			_elm_lang$core$Array$get(c),
			A2(_elm_lang$core$Array$get, r, field));
	});
var _user$project$Types$mapField = F2(
	function (fn, field) {
		return A2(
			_elm_lang$core$Array$indexedMap,
			F2(
				function (r, row) {
					return A2(
						_elm_lang$core$Array$indexedMap,
						F2(
							function (c, cell) {
								return A3(fn, r, c, cell);
							}),
						row);
				}),
			field);
	});
var _user$project$Types$setCell = F4(
	function (r, c, fn, field) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			field,
			A2(
				_elm_lang$core$Maybe$andThen,
				function (row) {
					return A2(
						_elm_lang$core$Maybe$map,
						function (row) {
							return A3(_elm_lang$core$Array$set, r, row, field);
						},
						A2(
							_elm_lang$core$Maybe$map,
							function (cell) {
								return A3(_elm_lang$core$Array$set, c, cell, row);
							},
							A2(
								_elm_lang$core$Maybe$map,
								function (cell) {
									return fn(cell);
								},
								A2(_elm_lang$core$Array$get, c, row))));
				},
				A2(_elm_lang$core$Array$get, r, field)));
	});
var _user$project$Types$Options = F3(
	function (a, b, c) {
		return {rows: a, cols: b, bombs: c};
	});
var _user$project$Types$Cell = F2(
	function (a, b) {
		return {contents: a, state: b};
	});
var _user$project$Types$Model = F3(
	function (a, b, c) {
		return {field: a, options: b, state: c};
	});
var _user$project$Types$Unclicked = function (a) {
	return {ctor: 'Unclicked', _0: a};
};
var _user$project$Types$Clicked = {ctor: 'Clicked'};
var _user$project$Types$Empty = {ctor: 'Empty'};
var _user$project$Types$Number = function (a) {
	return {ctor: 'Number', _0: a};
};
var _user$project$Types$Bomb = {ctor: 'Bomb'};
var _user$project$Types$mineCount = function (field) {
	var isBomb = function (cell) {
		return _elm_lang$core$Native_Utils.eq(cell.contents, _user$project$Types$Bomb);
	};
	var rowCount = function (row) {
		return _elm_lang$core$Array$length(
			A2(_elm_lang$core$Array$filter, isBomb, row));
	};
	return A3(
		_elm_lang$core$Array$foldl,
		F2(
			function (row, sum) {
				return sum + rowCount(row);
			}),
		0,
		field);
};
var _user$project$Types$setMine = F2(
	function (_p0, field) {
		var _p1 = _p0;
		var setMine = function (cell) {
			return _elm_lang$core$Native_Utils.update(
				cell,
				{contents: _user$project$Types$Bomb});
		};
		return A4(_user$project$Types$setCell, _p1._0, _p1._1, setMine, field);
	});
var _user$project$Types$Lost = {ctor: 'Lost'};
var _user$project$Types$Won = {ctor: 'Won'};
var _user$project$Types$Playing = function (a) {
	return {ctor: 'Playing', _0: a};
};
var _user$project$Types$Ready = {ctor: 'Ready'};
var _user$project$Types$MineList = F2(
	function (a, b) {
		return {ctor: 'MineList', _0: a, _1: b};
	});
var _user$project$Types$StopGame = {ctor: 'StopGame'};
var _user$project$Types$CellClicked = function (a) {
	return {ctor: 'CellClicked', _0: a};
};
